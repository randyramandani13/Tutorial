Page 6
Pembukaan
Selamat datang di ebook "Start your docker project"

saya yakin kamu semangat seperti saya ketika baru memulai dan mengenal dunia docker.

saya menulis buku ini agar mempermudah pelajaran kalian, memberikan step by step pengalaman belajar, darimana kita harus memulai basic docker dan mengembangkan docker skill kalian, kemudian membuat sample pekerjaan yang menyerupai dengan kondisi real life.

pertama, pada chapter pengenalan, saya akan menjelaskan apa itu docker dan masalah apa yang bisa di atasi jika kita menggunakan docker dalam software development projects.

selanjutnya, dika akan menginstall docker pada mesin komputer kita dan mulai membangun project menggunakan docker, dalam ebook ini juga dilampirkan example code pada setiap chapternya.

kita mulai perjalanan menjalankan aplikasi di dalam docker container, saya akan menunjukan bagaimana cara menjalankan dan memanage aplikasi kita dengan docker.

pada langkah selanjutnya, kita akan lebih mendalami tentang docker image, dan melihat bagaimana kita membuat container dari image, dan kita mempunyai sebuah fokus project, dan saya akan menjelaskan kepada kalian bagaimana mencari dan memilih docker images yang sesuai dengan project yang akan kita jalankan.

selama kita mempelajari docker image, kita juga akan membuat custom docker images menggunakan Dockerfile, mempelajari Dockerfile best practices, dan juga bagaimana workflow ketika membuat sebuah image.

Docker container dan Docker images adalah pondasi untuk membuat Docker-based project, kemudian saya juga membuat chapter yang cukup panjang yaitu "image building exercises" yang dimana kita akan membangun dan menjalankan aplikasi menggunakan shell script, Node.js, Phthon, PHP, C, dan Golang. Semua code example saya sertakan dalam code-examples.


Page 7
setelah menyelesaikan latihan diatas, anda akan memiliki pengetahuan yang kuat tentang konsep docker containers dan docker images.

selanjutnya, kita akan memahami lebih dalam mengenai multi-container application, dimana multiple container bekerja secara bersamaan untuk menjalan suatu aplikasi, saya akan menjelaskan kepada kalian bagaimana cara mendefinisikan, membuild dan menjalankan aplikasi menggunakan docker compose dan juga kita akan belajar mengenai docker network dan docker volume pada chapter ini dengan detail

Chapter dalam buku ini sejauh ini ditargetkan untuk membangun Docker-base projects, kita akan belajar bagaimana memulai dan memanage container, bagaimana cara build docker images untuk project kita, bagai mana build dan manage multi-container applications, dan manage network dan volumes

sekarang kita sudah siap untuk belejar bagaimana cara mengirimkan aplikasi setelah kita membuatnya, kita akan melihat bagaimana cara mengirimkan aplikasi docker images kita ke dalam docker hub, kita akan membuat automatic build workflow menggunakan GitHub, dan kita akan melakukan setup pada docker registry kita, dan juga melihat sebuah sample CI nantinya pada buku ini

selanjutnya kita akan belajar bagaimana cara menjalankan aplikasi kita pada server production, kita akan menjalankan aplikasi kita yang telah kita buat pada chapter pertama, dan pada saat menjalankan, kita coba fokus pada high availability dan scalability pada saat production server.

kita akan belajar bagaimana setup dan manage menggunakan docker swarm cluster, bagaimana deploy applications stack kedalam docker swarm, dan juga bagaimana melakukan scal dan manage service pada sebuah swarm

kita akan memulai cluster deployment dengan menggunakan local machine, pertama dengan satu machine kemudian kita akan membuat dua machine locally dan membuat sebuah swarm cluster, kita akan belajar bagaimana mendeploy dan manage application dalam multiple nodes, dan kita akan belajar bagaimana manage node pada sebuah swarm cluster


Page 8
pada titik ini, kita sudah memiliki pengetahuan yang cukup dengan docker skill, kita harus siap untuk menghadapi tantangan yang lebih kompleks.

untuk membuat kita lebih lancar menggunakan docker, saya juga menyertakan sejumlah example code, dimana kita akan Dockerize sebuah flask application.

kita akan mengambil sebuah flask web aplication yang cukup populer yaitu doilerplate project dari GitHub dan mengembangkan itu sampai kita bisa menggunakan docker untuk build, ship dan run application

dalam latihan ini, kita akan menggunakan docker container untuk generae sebuah application code. kita akan menggunakan environtment variables untuk merubah beberapa aspek pada project yang akan kita buat, seperti real-life projects. kita akan meng automate sebagian dari task project

kita akan melakukan setup development environtment dan automated testing menggunakan travis CI, kita juga menyiapkan production docker configuration untuk project ini

setelah setup project selesai, kita akan mendeploy dan menjalankan web application kita dalam aws menggunakan docker swarm cluster dan juga kubernetes cluster

saya sudah menyiapkan contoh yang berjenjang agar mudah di ikuti.

page 9
izinkan saya untuk pengenalan singkat secara garis besar tanpa contoh sekarang, dan kita akan melewati semuanya lagi dengan menggukanan contoh di chapter selanjutnya

Apa itu docker?
docker adalah sebuah tools untuk build, ship, and run aplikasi kita di dalam container

kita biasanya menemui docker ketika kita membutuhkan tools untuk mengirimkan aplikasi kita kedalam sebuah mesin baru, dan kita membutuhkan tools yang dapat dipercaya untuk mengirimkan application technical environtment dengan kode kita

kita juga biasanya bertemu docker saat kita membutuhkan sesuatu yang memudahkan kita untuk menyiapkan technical environtment baru untuk sebuah project

kita biasanya menggukanan beberapa technologies dalam software development projects, kita mempunyain front-end components, back-end server, database dan element yang lainnya seperti cache systems, log management dan lainnya

kita menyiapkan semua komponen menggukanan sebuah bahasa program, platform atau framework, kita bisa contohnya mengembangkan web server components menggunakan python, node.js, php atau tools sejenisnya

selama kita membangun aplikasi dengan tools itu, kita membuat source code itu dengan beberapa requirement, sepanjang jalan itu, solusi yang akan kita buat membutuhkan lebih dari sekedar source kode yang kita buat

kita perlu install package, create configuration files, dan menambahkan executable programs untuk project environtment kita. dependencies itu juga bagian dari aplikasi kita, aplikasi kita tidak akan jalan tanpa itu semua

saya pikir kita semua setuju, solusi ideal itu adalah melakukan encapsulate kode kita dan juga dependenciesnya kedalam satu bundle dan kita dapat menjalankan bundle itu kapanpun dan di mesin manapun dengan cara yang sama

page 10
docker container dapat melakukan itu semua, docker container meng encapsulate source code kita dan juga dependenciesnya dan menjalankan aplikasi kita, docker container itu portable, kita dapat mengirimkan sebuah docker container ke mesin lain dan menjalan container menggunakan command yang sama dimanapun

di dalam project biasanya, kita membuat container secara terpisah pada setiap komponen, contohnya kita membuat sebuah container untuk menjalankan front-end server dan container lainnya untuk menjalankan back-end 

dalam kasus ini, front-end container kita akan di encapsulate dengan fron-end code dan dependenciesnya dan akan dijalankan sebagai fron-end server process

demikian juga, back-end container kita akan di encapsulate dengan back-end code dan dependenciesnya dan dijalankan sebagai back-end server process

setiap containers akan di isolated dari satu dan lainnya, yang artinya, sekalipun docker container jalan di mesin yang sama, processes, file system, networking resource dan usernya terisolasi

docker container encapsulate kode kita dan dependenciesnya, dependencies itu semua sudah dimasukan kedalam server yang akan kita gukanan untuk membuat aplikasi kita

jika contohnya kita akan membuat sebuah web page nginx, docker container kita akan menjalankan nginx web server installasi, berisikan nginx runtime dan configuration, itu juga sudah sekalian memasukan source code kita pada saat kita menambahkan itu kedalam container

demikian juga node.js container akan memasukan versi tertentu node dan npm, python berisikan beberapa versi python dan juga yang lainnya

container kita definisikan menggunakan docker images, sebuah docker images adalah sebuah file system snapshoot dari files dan directory yang di dalamnya sudah termasuk semua file yang di butuhkan untuk menjalankan sebuah container, kita akan melihat lebih dalam kedalam container dan images pada contoh selanjutnya

kita akan memulai docker container dari sebuah docker images menggukanan docker container run command, saya akan memjelaskan detail pada chapter build

sebuah docker images biasanya sudah termasuk operating system seperti pakage manager, utility program dan system libraries, image juga biasanya sebuah technology componenet seperti node, python, php yang sudah terinstal, image kita juga seharusnya kita sudah masukan project file kita pada saat menambhakan images

page 11
ketika kita bekerja menggunakan docker dalam project kita, kita membuat docker image kita sendiri yang di dalamnya sudah termasuk application code dan semua program dan konfigurasi yang dibutuhkan dalam applications kita

saat image kita telah siap, kita menggunakan docker tools untuk mengirim image kita ke dalam environtment yang lainnya dan menggunakan docker command untuk start up container dan menjalankan aplikasi kita

docker container kita bertindak sebagai environtment yang terisolasi, 

problem apa yang bisa di selesaikan oleh docker?

ini pertanyaan yang paling sering keluar dari setiap orang yang ingin memulai menggunakan docker

docker dapat menyelesaikan masalah mengenai identical environtment untuk setiap application component antara berbagai macam environtment, contohnya development testing staging dan production, dimana setiap aplikasi mempunya environtmentnya sendiri yang terisolasi, dan environtment itu akan sama pada setiap tempat, dan environtment itu dibuat seringan mungkin

menyiapkan environment dan management adalah hal yang membosankan pada setiap project, tarket kita selalu meng isolasi aplikasi dari yang lainnya karna itu yang paling mudah dan murah untuk mengatasi isue reconfigure setting, restart dan upgrade application pada saat terisolasi, dengan demikian kita mengurangi kemungkinan cascading effect ketika kita melakukan perubahan pada satu komponen

jadi docker adalah sebuah container yang berjalan untuk instance application, atau application services

pada saat kita mendockerizing aplikasi kita, kita membuat file system snapshoot dari apikasi kita dan dependeciesnya termasuk system packages, binarie, libraries, configuration files, dan yang lainnya. snapshoot ini di sebut docker images

page 12
kita menggunakan docker command untuk menjalankan container dari docker images, kita bisa memulai beberapa kontainer menggunakan images yang sama, jadi docker images bisa di katakan sebagai file system images dan menjalankan environtments applications

tim infra kita menggunakan itu untuk membuat environtment script yang berbeda untuk stages yang berbeda seperti dev test stagging dan prod, semua environtment itu memang tidak persis sama, tapi mempunyai kemiripan

kita menggunakan untuk local development dan unit testing menggukanan windows machine, dan stages lainnya berjalan dengan unix system

bekerja seperti diatas itu bukannya tidak mungkin, tetapi memakan banyak cost, waktu dan effort untuk memanage setiap environtment dan banyak resiko 

kemudian kita juga mengadopsi virtualisasi, dalam skenario ini, 
kita membuat virtual machine diatas fisik machine kita, dan mendeploy apikasi kita di dalam virtual machine, dengan cara ini, kita membuat toolset untuk membuat aplikasi kita terpisah pada setiap komponen di vm yang berbeda

virtualisasi bagus untuk meningkan perawatan dan portability untuk software component, tetapi biaya akan membersa karna kita harus menambahkan virtual machine baru pada setiap runtime aplikasi kita

goal kita adalah menyiapkan dedicated resources untuk aplikasi kita, dan juga menjaga agar aplikasi kita tetap terisolasi dan juga meminimalisir rosources tambahan.

docker memberikan kita solusi untuk masalah kita diatas dengan containerization, docker container memberikan sebuah aplikasi yang terisolasi seperti vm tapi kita tidak membutuhkan dedicated vm untuk menjalankan aplikasi kita, sebuah container lebih ringan di bandingkan vm karna container share more system resource dibandingkan vm, kita akan belajar bagaimana container bekerja pada chapter selanjutnya

page 13

seperti yang terlihat diatas, saya mempunyai 2 container yang berjalan, satu adalah wordpress dengan apache web server dan satunya lagi adalah mariadb

jika kita melihat ke bagian port, kita melihat wordpress listen di port 80 yang berarti itu akan active pada localhost server

demikian pula, maria db listen di port 3307, saya bisa konek menggunakan mysql client

wordpress container berjalan menggunakan official wordpress images, yang di dalamnya sudah termasuk snapshoot dari wordpress file structure, ditambah dengan semua file apache web server di tambah dengan dependecy librari dan binarys, itu berisi semua yang dibutuhkan untuk menjalankan wordpress dengan apache, docker, docker engine jelas, meyakinkan apache proses berjalan terisolasi dan proses lainnya di dalam machine saya, dan container mempunyai dedicated resource 

saya menjalankan mariadb container dari official mariadb images, yang mana berisi dari semua yang dibutuhkan untuk menjalankan maria db

saya tidak perlu menginstall dan menjalankan apache atau mysql secara langsung di mesin saya, saya membuat devlopment saya di dalam container, saya sekarang bisa membuat replicate atau membuat ulang dengan environtment yang sama di laptop/server/vm lainnya menggunakan beberapa docker commands

main source untuk docker images adalah docker hub, itu adalah sebuat cloud registry dimana kita bisa mencari, menyimpan dan mengambil berbagai macam docker images

docker container berjalan seperti instance dari sebuah docker images, kita nantinya akan melihat bahwa bermain dengan docker image adalah bagian vital dari development workflow

dengan beberapa modifikasi dari official wordpress images, kita bisa membuat project wordpress images dengan wordpress plugins dan theme yang sudah ada di dalamnya, kemudian mendistribusikan sebagai satu docker images, dengan code dan environtment didalamnya, kita bisa menjalankan wordress aplication dengan self-contained environtment ( a container ) di semua machine dengan cara yang sama.

page 14
kita bisa menggunakan sebuah docker image untuk development, kemudian mendistribute image yang sama kepada komputer orang lain kemudian menjalankan container itu tanpa harus peduli dengan konfigurasi lagi di mesin yang lainnya

docker images itu ringan, portable, reproduce-able dan declarative

project teams biasanya menegaskan 2 benefit utama jika menggunakan docker
1. docker solve masalah "it worked on my machine" untuk alasan itu kita bisa membuat aplikasi kita menggunakan docker image yang sama pada developer laptop dan menggunakan image yang sama pada development dan test server, kemudian juga di production, kita akan menghadapi lebih sedikit bug mengenai environtmental issues dan misconfiguration, itu bisa menyelamatkan kita  dan tim dari waktu dan uang, dan bisa improve untuk quality application

2. kita bisa membangun sebuah end to end "build, ship and run" workflow untuk project kita menggunakan docker, kita bisa menggunakan docker standart configuration file, untuk mendefinisikan image kita, dan kita mendefinisikan bagaimana sebuah container berjalan dari sebuah images, bagaimana container itu seharusnya connect dan cooperate.

bagaimana cara docker bisa bekerja?
docker dahulu dibuat untuk memanage container pada linux server. dasar use-case nya adalah menjalankan aplikasi dalam isolated container, application dan dependencies yang di bundling bersama dalam linux server.

benefit utama menjalankan aplikasi dalam container pada linux sementara containernya terpisah, mereka share linux kernel dalam mesin yang sama

page 15
tujuan docker container adalah untuk memaksimalkan resource sharing antar container dan mengisolasi setiap bagian dari aplikasi yang berbeda dan memiliki space sendiri

karna high resource sharing, kita bisa membangun docker container dengan small foot-prints yang mana bisa mendiristribusikan aplikasi lebih mudah dan membuat startup time container lebih cepat

docker container berisikan binary files, libraries, configuraion file dan semua yang di butuhkan aplikasi dalam linux file system hierarchy

page 16
docker container berisikan aplikasi dan dependenciesnya dalam sebuah layer file system, ini membuat container men share dependencies mereka dengan tepat, jadi kita bisa mendapatkan efisiensi resource kedepannya dalam top sharing host machine kernel dari sharing file system layers

ini adalah langkah yang lebih aju dibandingkan dengan meng isolasi aplikasi menggunakan virtual machine. kita bisa mendapatkan level yang sama untuk mengisolasi aplikasi dengan virtual machine yang lebih mahal karna kita menbutuhkan dedicated guest operating system dan semuanya terisolasi jika menggunakan virtual machine.

page 17
karna berbagi resource yang lebih tinggi, container lebih portable dan efisien dibanding virtual machine, karna berbagi resource yang lebih tinggi, container lebih memerlukan security dan concern isolasi yang lebih rumit dibanding virtual machine dimana guest operating sistem terisolasi dari hostnya

docker container on non linux systems

kita sudah melihata bagaimana docker container share linux kernel dengan host machine, itu berarti docker container butuh running pada host mesin yang menggunakan linux kernel

berdasarkan apa yang kita pelajari selama ini, kita tau kita bisa melakukan containerize application dalam linux server dan develop container dalam linux machine,

kemudian muncul 2 pertanyaan,
1. apakah kita bisa membuat docker container pada non linux server?

2. bagaimana kita melakukan develop docker container pada mac dan windows machine?

apakah kita bisa membuat docker container pada non linux server?

docker dimulai untuk container managemenet solution untuk linux system yang di rilis pada 2013, dan di dalam tahun 2016 docker dan microsoft mengumumkan bahwa docker container tersetian untuk windows server dan kita bisa menjalankan langsung diatas windows server kernel.

page 18
sekarang ada 2 type docker container yang running pada production server:
- linyx container yang jalan di linux servern
- windows container yang jalan di windows server 2016 atau windows 10

linux container dan windows container pada dasarnya berbeda, kita menggunakan linyx shell commands binaries dan tool dalam linux container sementara kita menggunakan windows powershell commands windows binaries dan tool dalam windows container, linux container jalan pada linux machine, windows container berjalan pada windows machine, 

dalam buku ini, kita akan membangun linux container dan menjalannya pada linux servers, 

karna mayoritas docker application jalan pada linux containers

bagaimana kita develop docker container dalam mac dan windows machine?

linux container membutuhkan linux kernel untuk jalan, itu artinya kita tidak bisa menjalankan linux container pada windows dan mac langsung, karna operating system itu tidak mempunyai linux kernel,

kita membang bisa develop dan menjalankan docker containers pada keduanya windows dan mac, ketika kita menginstall docker applications pada windows dan mac, installation package berisi sebuah minimal linux virtual machine yang akan dijalankan oleh docker pada backgroun

prosesnya tidak akan terasa pada windows 10 dan newer mac. linux virtual machine berjalan hidden pada backgroun dan fully managed oleh docker

install docker pada mesin kita

docker tersedia pada 2 varian, docker docker community edition dan enterprise edition,kita cukup menggunakan CE untuk permulaan, itu gratis, dan itu juga bisa di gunakan untuk production opertaions.

pages 19
docker support 64bit OS dan jika kita menggunakan 32bit system, kita tidak bisa menjalankannya

jika kita adalah windows user:
- yang paling terbaik adalah menggunakan windows 10, kita bisa menggunakan docker for windows, itu berjalan pada windows 10 pro, enterprise dan education.
- jika kita menggunakan OS lainnya, kita bisa menggunakan docker toolbox

jika kita adalah mac user:
= yang paling terbaik adalah menggunakan MacOS desktop aplication atau docker for mac, itu bekerja pada OS X El Capitan 10.11 atau OS diatasnya
- jika menggunakan dibawahnya kita juga perlu menggunakan docker toolbox

jika kita linux user:
centos,debian,fedora dan ubuntu adalah official supported untul docker CE

page 20
menggunakan  sebuah virtual machine:
- jika kita memiliki computer yang cukup, sebaiknya kita menggunakan virtual machine seperti ubuntu yang running di virtualbox, ini membuat agar docker kita bisa terisolasi

install docker for windows
kita bisa bekerja menggunakna docker pada windows

page 21
link dibawah ini adalah informasi yang kita butuhkan:
versi windows 10 64 seharusnya memiliki hyper-v pada system kita, hyper-v adalah sebuah hypervisor, artinya program ini memungkinkan kita menjalankan virtual machine, hyper-v dibutuhkan oleh docker untuk menjalankan small virtual machine linux container di dalam windows
semua ini terjadi ketika kita melakukan installasi docker windows application dan itu di hidden .
docker windows install akan meng enable hyper-v otomatis

page 22

page 23

page 24

page 25
install docker compose
windows dan mac installer sudah menyertakan docker compose di dalamnya, namun tidak pada linux
pada linux kita harus menginstallnya secara manual

page 26
jika kita memiliki computer yang cukup tinggi, kita bisa menggunakan virtual machine untuk belajar, contohnya kita menggunakan virtual box yang gratis atau vmware yang berbayar

kita mungkin bisa mengikuti contoh dari butu ini, tapi mungkin kita akan mengalami kesulitan ketika kita menjalankan beberapa virtual machine untuk membangun sebuah cluster, saya membuat semua example ini dalam vmware ubuntu virtual machine, dan juga menjalankan cluster pada vm

page 27

page 28

page 29

page 30
Membuat container pertama
untuk membangun sebuah docker based aplication pada project kita, kita perlu menguasai sebuah gagasan dan basic dari container management dahulu. jadi kita mulai dari sini

mari kita membuat Nginx web server sebagai contoh pertama container kita

pertama bukan docker hub pada browser kita, docker hub adalah sebuah cloud registry dimana kita bisa mencari dan mengambil docker image untuk project kita, 

kita juga bisa mengirim/menyimpan docker images kita dalam docker hub agar semua member team bisa mendownloadnya, 

sangat penting untuk sebuah project kita untuk mencari docker images yang pas untuk project ita. karna itu saya memutuskan untuk membuat chapter tentang navigating and understanding docker repositories on the docker hub nanti

mari fokus pada container pertama kita, pada docker hub mari kita cari nginx

kita akan mendapatkan list image yang tersedia . perlu di catat image pertama kita di note sebagai official image

page 31
office image artinya di maintained oleh community, dan docker mempunya dedicated team yang bertanggung jawab untuk mereview dan publish official images, tim ini berkolaborasi dengan software maintainers, expert dan docker community.

page 32











