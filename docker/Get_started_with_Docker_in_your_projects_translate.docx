Page 6
Pembukaan
Selamat datang di ebook "Start your docker project"

saya yakin kamu semangat seperti saya ketika baru memulai dan mengenal dunia docker.

saya menulis buku ini agar mempermudah pelajaran kalian, memberikan step by step pengalaman belajar, darimana kita harus memulai basic docker dan mengembangkan docker skill kalian, kemudian membuat sample pekerjaan yang menyerupai dengan kondisi real life.

pertama, pada chapter pengenalan, saya akan menjelaskan apa itu docker dan masalah apa yang bisa di atasi jika kita menggunakan docker dalam software development projects.

selanjutnya, dika akan menginstall docker pada mesin komputer kita dan mulai membangun project menggunakan docker, dalam ebook ini juga dilampirkan example code pada setiap chapternya.

kita mulai perjalanan menjalankan aplikasi di dalam docker container, saya akan menunjukan bagaimana cara menjalankan dan memanage aplikasi kita dengan docker.

pada langkah selanjutnya, kita akan lebih mendalami tentang docker image, dan melihat bagaimana kita membuat container dari image, dan kita mempunyai sebuah fokus project, dan saya akan menjelaskan kepada kalian bagaimana mencari dan memilih docker images yang sesuai dengan project yang akan kita jalankan.

selama kita mempelajari docker image, kita juga akan membuat custom docker images menggunakan Dockerfile, mempelajari Dockerfile best practices, dan juga bagaimana workflow ketika membuat sebuah image.

Docker container dan Docker images adalah pondasi untuk membuat Docker-based project, kemudian saya juga membuat chapter yang cukup panjang yaitu "image building exercises" yang dimana kita akan membangun dan menjalankan aplikasi menggunakan shell script, Node.js, Phthon, PHP, C, dan Golang. Semua code example saya sertakan dalam code-examples.


Page 7
setelah menyelesaikan latihan diatas, anda akan memiliki pengetahuan yang kuat tentang konsep docker containers dan docker images.

selanjutnya, kita akan memahami lebih dalam mengenai multi-container application, dimana multiple container bekerja secara bersamaan untuk menjalan suatu aplikasi, saya akan menjelaskan kepada kalian bagaimana cara mendefinisikan, membuild dan menjalankan aplikasi menggunakan docker compose dan juga kita akan belajar mengenai docker network dan docker volume pada chapter ini dengan detail

Chapter dalam buku ini sejauh ini ditargetkan untuk membangun Docker-base projects, kita akan belajar bagaimana memulai dan memanage container, bagaimana cara build docker images untuk project kita, bagai mana build dan manage multi-container applications, dan manage network dan volumes

sekarang kita sudah siap untuk belejar bagaimana cara mengirimkan aplikasi setelah kita membuatnya, kita akan melihat bagaimana cara mengirimkan aplikasi docker images kita ke dalam docker hub, kita akan membuat automatic build workflow menggunakan GitHub, dan kita akan melakukan setup pada docker registry kita, dan juga melihat sebuah sample CI nantinya pada buku ini

selanjutnya kita akan belajar bagaimana cara menjalankan aplikasi kita pada server production, kita akan menjalankan aplikasi kita yang telah kita buat pada chapter pertama, dan pada saat menjalankan, kita coba fokus pada high availability dan scalability pada saat production server.

kita akan belajar bagaimana setup dan manage menggunakan docker swarm cluster, bagaimana deploy applications stack kedalam docker swarm, dan juga bagaimana melakukan scal dan manage service pada sebuah swarm

kita akan memulai cluster deployment dengan menggunakan local machine, pertama dengan satu machine kemudian kita akan membuat dua machine locally dan membuat sebuah swarm cluster, kita akan belajar bagaimana mendeploy dan manage application dalam multiple nodes, dan kita akan belajar bagaimana manage node pada sebuah swarm cluster


Page 8
pada titik ini, kita sudah memiliki pengetahuan yang cukup dengan docker skill, kita harus siap untuk menghadapi tantangan yang lebih kompleks.

untuk membuat kita lebih lancar menggunakan docker, saya juga menyertakan sejumlah example code, dimana kita akan Dockerize sebuah flask application.

kita akan mengambil sebuah flask web aplication yang cukup populer yaitu doilerplate project dari GitHub dan mengembangkan itu sampai kita bisa menggunakan docker untuk build, ship dan run application

dalam latihan ini, kita akan menggunakan docker container untuk generae sebuah application code. kita akan menggunakan environtment variables untuk merubah beberapa aspek pada project yang akan kita buat, seperti real-life projects. kita akan meng automate sebagian dari task project

kita akan melakukan setup development environtment dan automated testing menggunakan travis CI, kita juga menyiapkan production docker configuration untuk project ini

setelah setup project selesai, kita akan mendeploy dan menjalankan web application kita dalam aws menggunakan docker swarm cluster dan juga kubernetes cluster

saya sudah menyiapkan contoh yang berjenjang agar mudah di ikuti.

page 9
izinkan saya untuk pengenalan singkat secara garis besar tanpa contoh sekarang, dan kita akan melewati semuanya lagi dengan menggukanan contoh di chapter selanjutnya

Apa itu docker?
docker adalah sebuah tools untuk build, ship, and run aplikasi kita di dalam container

kita biasanya menemui docker ketika kita membutuhkan tools untuk mengirimkan aplikasi kita kedalam sebuah mesin baru, dan kita membutuhkan tools yang dapat dipercaya untuk mengirimkan application technical environtment dengan kode kita

kita juga biasanya bertemu docker saat kita membutuhkan sesuatu yang memudahkan kita untuk menyiapkan technical environtment baru untuk sebuah project

kita biasanya menggukanan beberapa technologies dalam software development projects, kita mempunyain front-end components, back-end server, database dan element yang lainnya seperti cache systems, log management dan lainnya

kita menyiapkan semua komponen menggukanan sebuah bahasa program, platform atau framework, kita bisa contohnya mengembangkan web server components menggunakan python, node.js, php atau tools sejenisnya

selama kita membangun aplikasi dengan tools itu, kita membuat source code itu dengan beberapa requirement, sepanjang jalan itu, solusi yang akan kita buat membutuhkan lebih dari sekedar source kode yang kita buat

kita perlu install package, create configuration files, dan menambahkan executable programs untuk project environtment kita. dependencies itu juga bagian dari aplikasi kita, aplikasi kita tidak akan jalan tanpa itu semua

saya pikir kita semua setuju, solusi ideal itu adalah melakukan encapsulate kode kita dan juga dependenciesnya kedalam satu bundle dan kita dapat menjalankan bundle itu kapanpun dan di mesin manapun dengan cara yang sama

page 10
docker container dapat melakukan itu semua, docker container meng encapsulate source code kita dan juga dependenciesnya dan menjalankan aplikasi kita, docker container itu portable, kita dapat mengirimkan sebuah docker container ke mesin lain dan menjalan container menggunakan command yang sama dimanapun

di dalam project biasanya, kita membuat container secara terpisah pada setiap komponen, contohnya kita membuat sebuah container untuk menjalankan front-end server dan container lainnya untuk menjalankan back-end 

dalam kasus ini, front-end container kita akan di encapsulate dengan fron-end code dan dependenciesnya dan akan dijalankan sebagai fron-end server process

demikian juga, back-end container kita akan di encapsulate dengan back-end code dan dependenciesnya dan dijalankan sebagai back-end server process

setiap containers akan di isolated dari satu dan lainnya, yang artinya, sekalipun docker container jalan di mesin yang sama, processes, file system, networking resource dan usernya terisolasi

docker container encapsulate kode kita dan dependenciesnya, dependencies itu semua sudah dimasukan kedalam server yang akan kita gukanan untuk membuat aplikasi kita

jika contohnya kita akan membuat sebuah web page nginx, docker container kita akan menjalankan nginx web server installasi, berisikan nginx runtime dan configuration, itu juga sudah sekalian memasukan source code kita pada saat kita menambahkan itu kedalam container

demikian juga node.js container akan memasukan versi tertentu node dan npm, python berisikan beberapa versi python dan juga yang lainnya

container kita definisikan menggunakan docker images, sebuah docker images adalah sebuah file system snapshoot dari files dan directory yang di dalamnya sudah termasuk semua file yang di butuhkan untuk menjalankan sebuah container, kita akan melihat lebih dalam kedalam container dan images pada contoh selanjutnya

kita akan memulai docker container dari sebuah docker images menggukanan docker container run command, saya akan memjelaskan detail pada chapter build

sebuah docker images biasanya sudah termasuk operating system seperti pakage manager, utility program dan system libraries, image juga biasanya sebuah technology componenet seperti node, python, php yang sudah terinstal, image kita juga seharusnya kita sudah masukan project file kita pada saat menambhakan images

page 11
ketika kita bekerja menggunakan docker dalam project kita, kita membuat docker image kita sendiri yang di dalamnya sudah termasuk application code dan semua program dan konfigurasi yang dibutuhkan dalam applications kita

saat image kita telah siap, kita menggunakan docker tools untuk mengirim image kita ke dalam environtment yang lainnya dan menggunakan docker command untuk start up container dan menjalankan aplikasi kita

docker container kita bertindak sebagai environtment yang terisolasi, 

problem apa yang bisa di selesaikan oleh docker?

ini pertanyaan yang paling sering keluar dari setiap orang yang ingin memulai menggunakan docker

docker dapat menyelesaikan masalah mengenai identical environtment untuk setiap application component antara berbagai macam environtment, contohnya development testing staging dan production, dimana setiap aplikasi mempunya environtmentnya sendiri yang terisolasi, dan environtment itu akan sama pada setiap tempat, dan environtment itu dibuat seringan mungkin

menyiapkan environment dan management adalah hal yang membosankan pada setiap project, tarket kita selalu meng isolasi aplikasi dari yang lainnya karna itu yang paling mudah dan murah untuk mengatasi isue reconfigure setting, restart dan upgrade application pada saat terisolasi, dengan demikian kita mengurangi kemungkinan cascading effect ketika kita melakukan perubahan pada satu komponen

jadi docker adalah sebuah container yang berjalan untuk instance application, atau application services

pada saat kita mendockerizing aplikasi kita, kita membuat file system snapshoot dari apikasi kita dan dependeciesnya termasuk system packages, binarie, libraries, configuration files, dan yang lainnya. snapshoot ini di sebut docker images

page 12

